using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices.WindowsRuntime;
using Windows.Foundation;
using Windows.Foundation.Collections;
using Windows.UI.Xaml;
using Windows.UI.Xaml.Controls;
using Windows.UI.Xaml.Controls.Primitives;
using Windows.UI.Xaml.Data;
using Windows.UI.Xaml.Input;
using Windows.UI.Xaml.Media;
using Windows.UI.Xaml.Navigation;
using Windows.Devices.Enumeration;
using Windows.Devices.I2c;
using System.Threading;
using System.Diagnostics;

// The Blank Page item template is documented at http://go.microsoft.com/fwlink/?LinkId=402352&clcid=0x409

namespace ConnectionI2C
{
    /// <summary>
    /// An empty page that can be used on its own or navigated to within a Frame.
    /// </summary>
    public sealed partial class MainPage : Page
    {
        private I2cDevice Device;

        private Timer periodicTimer;

        public MainPage()

        {

            this.InitializeComponent();
          
            initcommunitcation();

        }


        private async void initcommunitcation()

        {
           /* // Get a selector string for bus "I2C1"
            string aqs = I2cDevice.GetDeviceSelector("I2C1");

            // Find the I2C bus controller with our selector string
            var dis = await DeviceInformation.FindAllAsync(aqs);
            if (dis.Count == 0)
                return; // bus not found

            // 0x40 is the I2C device address
            var settings = new I2cConnectionSettings(0x40);

            // Create an I2cDevice with our selected bus controller and I2C settings
            using (I2cDevice device = await I2cDevice.FromIdAsync(dis[0].Id, settings))
            {
                byte[] writeBuf = { 0x01, 0x02, 0x03, 0x04 };
                device.Write(writeBuf);
            }
        */

           

            var settings = new I2cConnectionSettings(0x40); // Arduino address

            settings.BusSpeed = I2cBusSpeed.StandardMode;

            string aqs = I2cDevice.GetDeviceSelector("I2C1");

            var dis = await DeviceInformation.FindAllAsync(aqs);
            Device = await I2cDevice.FromIdAsync(dis[0].Id, settings);
            
            Debug.WriteLine(dis[0].Id + " " + settings + " " + aqs);
            periodicTimer = new Timer(this.TimerCallback, null, 0, 200); // Create a timmer
              if (Device == null)
                {
                    Debug.WriteLine(
                        "Slave address {0} on I2C Controller {1} is currently in use by " +
                        "another application. Please ensure that no other applications are using I2C.",
                        settings.SlaveAddress,
                        dis[0].Id);
                    return;
                }

        }

        private void TimerCallback(object state)
            {

                byte[] RegAddrBuf = new byte[] { 0x40 };

                byte[] ReadBuf = new byte[64];

                try

                {

                    Device.Read(ReadBuf); // read the data


            }

                catch (Exception f)

                {

                    Debug.WriteLine(f.Message);

                }

                char[] cArray = System.Text.Encoding.UTF8.GetString(ReadBuf,0,64).ToCharArray();  // Converte  Byte to Char

                String c = new String(cArray);

                Debug.WriteLine(c);
            }
      
    }
}