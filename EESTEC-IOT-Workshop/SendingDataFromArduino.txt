#include <Wire.h>
#include <SPI.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BMP280.h>
#define BMP_SCK 13
#define BMP_MISO 12
#define BMP_MOSI 10
#define BMP_CS 11
#define SLAVE_ADDRESS 0x40
Adafruit_BMP280 bme(BMP_CS, BMP_MOSI, BMP_MISO,  BMP_SCK);
const int gasSensor = 0; 
void setup() {
  Serial.begin(9600);
  Wire.begin(SLAVE_ADDRESS);
  Serial.println("Ready!");
  Serial.println(F("BMP280 test"));
  
  if (!bme.begin()) {  
    Serial.println(F("Could not find a valid BMP280 sensor, check wiring!"));
    while (1);
  }
}
 
void loop() {
    Wire.onRequest(sendData2);
    delay(400);
    
}
void sendData1(){
  
    
    
    
    char  PressToSend[20];
    ftoa(bme.readPressure(), PressToSend,4);
    Wire.write(PressToSend);
    Serial.println(PressToSend);
    Wire.onRequest(sendData2);
//    Wire.write(bme.readPressure());
//
//    Wire.write(bme.readAltitude(1013.25)); 
//    
//    Wire.write(voltage);
    
}
void reverse(char *str, int len)
{
    int i=0, j=len-1, temp;
    while (i<j)
    {
        temp = str[i];
        str[i] = str[j];
        str[j] = temp;
        i++; j--;
    }
}
int intToStr(int x, char str[], int d)
{
    int i = 0;
    while (x)
    {
        str[i++] = (x%10) + '0';
        x = x/10;
    }
 
    // If number of digits required is more, then
    // add 0s at the beginning
    while (i < d)
        str[i++] = '0';
 
    reverse(str, i);
    str[i] = '\0';
    return i;
}
void ftoa(float n, char *res, int afterpoint)
{
    // Extract integer part
    int ipart = (int)n;
 
    // Extract floating part
    float fpart = n - (float)ipart;
 
    // convert integer part to string
    int i = intToStr(ipart, res, 0);
 
    // check for display option after point
    if (afterpoint != 0)
    {
        res[i] = '.';  // add dot
 
        // Get the value of fraction part upto given no.
        // of points after dot. The third parameter is needed
        // to handle cases like 233.007
        fpart = fpart * pow(10, afterpoint);
 
        intToStr((int)fpart, res + i + 1, afterpoint);
    }
}
float getVoltage(int pin)
{
return (analogRead(pin) * 0.004882814);
}